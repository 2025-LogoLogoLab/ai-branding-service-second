# .github/workflows/backend-deploy-on-frontend-update.yml
name: Backend Deploy (on frontend update)                               # [워크플로 이름](사용자 변경 가능)

on:                                                                     # [워크플로 구문] 트리거 (GitHub 제공)
  workflow_run:                                                         # [이벤트] 다른 워크플로 완료 시 (GitHub 제공)
    workflows: [ "Frontend Build → Artifact → Commit → Auto PR" ]                 #  - 연동할 프론트 워크플로의 name (사용자 저장한 이름과 동일해야 함)
    types: [ completed ]                                                #  - 완료 시점에만 반응
    branches: [ frontend ]                                        #  - 어떤 브랜치에서 돌아간 빌드가 완료되면 트리거할지 (변경 가능)
  workflow_dispatch:                                                    # [이벤트] 수동 실행 허용 (GitHub 제공)

jobs:                                                                   # [워크플로 구문] 잡 집합 (GitHub 제공)
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
                                                                        # [조건] 수동 실행이거나, 연동된 워크플로가 성공했을 때만 진행
    runs-on: ubuntu-latest                                              # [러너] GitHub 호스티드 러너 (변경 가능)

    permissions:                                                        # [권한] 아티팩트 다운로드/로그 코멘트 등 최소 필요 권한
      contents: read                                                    #  - 코드 읽기 (변경 가능; 여기선 read만 필요)
      actions: read

    env:                                                                # [환경 변수] 배포에 쓰는 값 (사용자 변경 권장)
      SERVICE_NAME: logologolab.service                                 #  - systemd 유닛 이름 (변경 가능)
      DEPLOY_DIR: /home/ec2-user                                        #  - JAR 파일을 둘 서버 경로 (변경 가능)
      # (선택) STATIC_DIR: /var/www/html                               #  - Nginx 등으로 정적 파일 서빙 시 경로 (프로젝트에 맞게)

    steps:
      - name: Checkout                                                  # [공식 액션] 리포지토리 체크아웃
        uses: actions/checkout@v4                                       #  - 버전 고정 권장 (변경 가능)

      - name: Download frontend artifact                                # [공식 액션] 프론트 빌드 아티팩트 수신
        uses: actions/download-artifact@v4                              #  - v4 권장
        with:
          name: frontend-build                                          #  - 프론트 워크플로에서 올린 아티팩트 이름과 동일해야 함(변경 가능)
          run-id: ${{ github.event.workflow_run.id }}                   # [중요] 트리거한 **소스 런**의 ID를 지정 (크로스-런)
          github-token: ${{ secrets.GITHUB_TOKEN }}                     # [권장] 리포 권한 토큰(기본 제공) 
          path: ./_artifact                                             #  - 저장 경로 (변경 가능)

      # (선택) 정적 파일을 서버에 별도 배포할 경우 scp로 업로드
      # - name: Upload static bundle (optional)
      #   uses: appleboy/scp-action@v0.1.7                               # [마켓 액션] SCP 파일 전송
      #   with:
      #     host: ${{ secrets.SSH_HOST }}                                #  - EC2 호스트/IP (비밀)
      #     username: ${{ secrets.SSH_USER }}                            #  - SSH 사용자 (비밀, 예: ec2-user)
      #     key: ${{ secrets.SSH_KEY }}                                  #  - PEM 개인키 내용 (비밀)
      #     port: ${{ secrets.SSH_PORT || 22 }}                          #  - 포트(옵션)
      #     source: "_artifact/frontend.tar.gz"                          #  - 앞선 아티팩트(압축 파일)
      #     target: "${{ env.DEPLOY_DIR }}/frontend.tar.gz"              #  - 서버 임시 경로
      #   # 이후 SSH에서 tar 해제: sudo mkdir -p $STATIC_DIR && sudo tar -xzf ... -C $STATIC_DIR --strip-components=0
      #   # (정적을 Nginx로 서빙한다면 적절한 디렉터리에 해제)

      - name: Set up Java (corretto)                                      # [공식 액션] JDK 설치/Gradle 캐시
        uses: actions/setup-java@v4
        with:
          distribution: corretto                                         #  - JDK 배포판 (서버 환경: corretto)
          java-version: '17'                                             #  - 프로젝트 JDK 버전(변경 가능)
          cache: gradle                                                  #  - Gradle 캐시 활성화

      - name: Build Spring Boot (Gradle)                                 # [셸 명령] 백엔드 빌드
        working-directory: ./backend/logologolab                         #  - 백엔드 루트로 이동 (사용자 경로에 맞게)
        run: |
          chmod +x ./gradlew                                            #  - 그레이들 래퍼 실행권한 (필요시)
          # ./gradlew clean build                                         #  - 로컬과 동일: 테스트 포함 빌드
          ./gradlew clean build -x test                               #  - (선택) 테스트 제외 시 사용

      # (1) JAR 찾기: backend/logologolab 안에서 찾되, 출력값은 "리포 루트 기준 경로"로 내보내기
      - name: Find built JAR path                                   # [GitHub 제공 run 스텝]
        id: jar                                                     # [고정] 이후 outputs로 참조
        working-directory: ./backend/logologolab                    # [사용자 변경 가능] 프로젝트 루트
        run: |
          JAR=$(ls -t build/libs/*.jar | grep -v -- '-plain\.jar' | head -n1)  # [사용자 변경 가능] 최신 bootJar 선택
          echo "file=backend/logologolab/$JAR" >> "$GITHUB_OUTPUT"             # [중요] 리포 루트 기준 경로로 출력
              
      # (2) 업로드: uses 스텝은 working-directory가 안 먹으므로, 꼭 루트 기준 경로를 넘기기
      - name: Upload JAR to EC2 (SCP)                              # [마켓 액션]
        uses: appleboy/scp-action@v0.1.7                           # [고정] 액션 호출
        with:
          host: ${{ secrets.SSH_HOST }}                            # [비밀] 서버 호스트
          username: ${{ secrets.SSH_USER }}                        # [비밀] SSH 사용자
          key: ${{ secrets.SSH_KEY }}                              # [비밀] 개인키
          port: ${{ secrets.SSH_PORT || 22 }}                      # [옵션] 포트
          source: "${{ steps.jar.outputs.file }}"                  # [중요] 루트 기준 경로(위에서 만든 출력값)
          target: "${{ env.DEPLOY_DIR }}/"                         # [사용자 변경 가능] 서버 경로


      - name: Restart Spring service (SSH)                                # [마켓 액션] 원격 명령: 서비스 재시작/상태/로그
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            sudo systemctl restart "${{ env.SERVICE_NAME }}"             #  - 서비스 재시작
            sudo systemctl status  "${{ env.SERVICE_NAME }}" -n 50 --no-pager  #  - 최근 상태 로그 50줄
            # 인터랙티브 명령 'less +F'는 CI에 부적합 → journalctl로 최근 로그 출력
            sudo journalctl -u "${{ env.SERVICE_NAME }}" -n 200 --no-pager     #  - 최근 200줄 로그
