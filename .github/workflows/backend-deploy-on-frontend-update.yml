# .github/workflows/backend-deploy-on-frontend-update.yml
name: Backend Deploy (on frontend update)                               # [워크플로 이름](사용자 변경 가능)

on:                                                                     # [워크플로 구문] 트리거 (GitHub 제공)
  workflow_run:                                                         # [이벤트] 다른 워크플로 완료 시 (GitHub 제공)
    workflows: [ "Frontend Build → Artifact → Commit → Auto PR" ]                 #  - 연동할 프론트 워크플로의 name (사용자 저장한 이름과 동일해야 함)
    types: [ completed ]                                                #  - 완료 시점에만 반응
    branches: [ frontend ]                                        #  - 어떤 브랜치에서 돌아간 빌드가 완료되면 트리거할지 (변경 가능)
  workflow_dispatch:                                                    # [이벤트] 수동 실행 허용 (GitHub 제공)

jobs:                                                                   # [워크플로 구문] 잡 집합 (GitHub 제공)
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
                                                                        # [조건] 수동 실행이거나, 연동된 워크플로가 성공했을 때만 진행
    runs-on: ubuntu-latest                                              # [러너] GitHub 호스티드 러너 (변경 가능)

    permissions:                                                        # [권한] 아티팩트 다운로드/로그 코멘트 등 최소 필요 권한
      contents: read                                                    #  - 코드 읽기 (변경 가능; 여기선 read만 필요)
      actions: read

    env:                                                                # [환경 변수] 배포에 쓰는 값 (사용자 변경 권장)
      SERVICE_NAME: logologolab.service                                 #  - systemd 유닛 이름 (변경 가능)
      DEPLOY_DIR: /home/ec2-user                                        #  - JAR 파일을 둘 서버 경로 (변경 가능)
      FRONTEND_BUNDLE_DIR: ./_artifact                                    # [고정/사용자 변경] download-artifact 저장 위치
      SPRING_STATIC_DIR: ./backend/logologolab/src/main/resources/static  # [사용자 변경] 스프링 정적 리소스 폴더


    steps:
      - name: Checkout                                                  # [공식 액션] 리포지토리 체크아웃
        uses: actions/checkout@v4                                       #  - 버전 고정 권장 (변경 가능)
        with:
          ref: backend                                                  # 최신 백엔드 변경사항 적용을 위해 백엔드 브랜치에서 실행하도록 변경
          fetch-depth: 1                                                # 백엔드의 최신 커밋만 가지고 처리

      - name: Download frontend artifact                                # [공식 액션] 프론트 빌드 아티팩트 수신
        uses: actions/download-artifact@v4                              #  - v4 권장
        with:
          name: frontend-build                                          #  - 프론트 워크플로에서 올린 아티팩트 이름과 동일해야 함(변경 가능)
          run-id: ${{ github.event.workflow_run.id }}                   # [중요] 트리거한 **소스 런**의 ID를 지정 (크로스-런)
          github-token: ${{ secrets.GITHUB_TOKEN }}                     # [권장] 리포 권한 토큰(기본 제공) 
          path: ./_artifact                                             #  - 저장 경로 (변경 가능)

      - name: Sync frontend → Spring static                               # [셸] 프론트 정적 리소스를 스프링에 반영
        run: |
          ls -al ${{ env.FRONTEND_BUNDLE_DIR }}
          set -e                                                          # [셸] 에러 시 즉시 실패
          mkdir -p "${{ env.SPRING_STATIC_DIR }}"                         # [사용자 변경] static 폴더 보장 생성
          rm -rf "${{ env.SPRING_STATIC_DIR }}"/*                         # [주의] 기존 파일 정리(필요 시 주석 처리)
          cp -a "${{ env.FRONTEND_BUNDLE_DIR }}"/. "${{ env.SPRING_STATIC_DIR }}"/
                                                                          # [핵심] 아티팩트(예: dist의 index.html, assets/) 내용을 그대로 복사
          ls -la "${{ env.SPRING_STATIC_DIR }}"                           # [검증] 복사된 파일 목록 출력

      - name: Set up Java (corretto)                                      # [공식 액션] JDK 설치/Gradle 캐시
        uses: actions/setup-java@v4
        with:
          distribution: corretto                                         #  - JDK 배포판 (서버 환경: corretto)
          java-version: '17'                                             #  - 프로젝트 JDK 버전(변경 가능)
          cache: gradle                                                  #  - Gradle 캐시 활성화

      - name: Build Spring Boot (Gradle)                                 # [셸 명령] 백엔드 빌드
        working-directory: ./backend/logologolab                         #  - 백엔드 루트로 이동 (사용자 경로에 맞게)
        run: |
          chmod +x ./gradlew                                            #  - 그레이들 래퍼 실행권한 (필요시)
          # ./gradlew clean build                                         #  - 로컬과 동일: 테스트 포함 빌드
          ./gradlew clean build -x test                               #  - (선택) 테스트 제외 시 사용

      - name: Find built JAR path                                        # [셸 명령] 최신 JAR 탐색 후 출력값으로 전달
        id: jar
        working-directory: ./backend/logologolab
        run: |
          JAR=$(ls -t build/libs/*.jar | head -n1)                      #  - 가장 최근 JAR 1개
          echo "file=$JAR" >> "$GITHUB_OUTPUT"                          #  - steps.jar.outputs.file 로 노출
          echo $GITHUB_OUTPUT

      - name: Upload JAR to EC2 (SCP)                                    # [마켓 액션] 원격 서버로 JAR 복사
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}                                  #  - 비밀: EC2 호스트/IP 또는 도메인(duckdns 등)
          username: ${{ secrets.SSH_USER }}                              #  - 비밀: SSH 사용자 (예: ec2-user)
          key: ${{ secrets.SSH_KEY }}                                    #  - 비밀: PEM 개인키 내용
          port: ${{ secrets.SSH_PORT || 22 }}                            #  - 비밀/옵션
          source: "backend/logologolab/build/libs/*-SNAPSHOT.jar,!backend/logologolab/build/libs/*-plain.jar"  # 리포 루트 기준
          target: "${{ env.DEPLOY_DIR }}/"                # /home/ec2-user/
          strip_components: 4                             # backend/logologolab/build/libs/ 제거 → 파일만 떨어짐
          overwrite: true                                 # 같은 이름이면 덮어쓰기

      - name: Restart Spring service (SSH)                                # [마켓 액션] 원격 명령: 서비스 재시작/상태/로그
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            sudo systemctl restart "${{ env.SERVICE_NAME }}"             #  - 서비스 재시작
            sudo systemctl status  "${{ env.SERVICE_NAME }}" -n 50 --no-pager  #  - 최근 상태 로그 50줄
            # 인터랙티브 명령 'less +F'는 CI에 부적합 → journalctl로 최근 로그 출력
            sudo journalctl -u "${{ env.SERVICE_NAME }}" -n 200 --no-pager     #  - 최근 200줄 로그
